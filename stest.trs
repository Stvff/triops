type char is 1 bytes;
type int is 8 bytes;
type s32 is 4 bytes;

char[] greet = "Sailor\n";

char[][] hellos = {
	"hello\n", "hey\n", "haiii\n", "greetings\n"
};

char[][][] aaa = {
	{"h", "haaa", "hoohooo"}, {"haiaaiaa"}
};


## (int A) (int B) write (int C, int F, int D = 10);

int[] D;

enum int syscalls {write = 1, exit = 60};
enum int stream { In, out, err };

#*
TODO:
	Fix up labels (it doesn't recognize when labels are incorrect or unknown (do remember you can define future labels)
	I'd like to have better register directives #r<0-15><b-w-d->
	More funcs!
*#

entry {
	mov #rq rsi, greet[0];
	mov #rq rdx, greet[1];

	mov #rq rax, syscalls.write;
	mov #rq rdi, stream.out;
	syscall;

	call #lbl function;

	mov #rq rax, syscalls.exit;
	mov #rq rdi, 0;
	syscall;

	#lbl function;
		push 6;
		push #lbl data;

		mov #rq rsi, #rq rsp[0];
		mov #rq rdx, #rq rsp[1];
	
		mov #rq rax, syscalls.write;
		mov #rq rdi, stream.err;
		syscall;
		call #lbl function2;
		add #rq rsp, 16;
	ret;

	#lbl function2;
		mov #rq rax, syscalls.write;
		mov #rq rdi, stream.err;
		syscall;
	ret;

	#lbl data;
	db 69, 69, 69;
	db 69, 69, 10;
}
