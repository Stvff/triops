import "/lib/triops/clib" cl;

type int is 4 bytes #intform;

type opaque_string is 8 by 2; ## "bytes" is optional;

type char is 1 bytes #stringform;
type string is char[];
type cstring is char[0];

enum int cool_enum {
	ha, ba = -3, ca, da, fa, ga
};

enum string basically_a_const {i = "a\"\\\n", j, k, w = "Hewwo! ^^"};

##string[] s1 = {"abe", "fjsad", "fasjd"};
##string[][132] string_slice_array = {s1, s2, s3, s4 ... };
##string[][132][0] string_slice_array_ptr = {ssa};

int value1 = 20;
int value2 = -20;
#*

For runtime expressions:
A a, B b = 1, 2;
C c;
A a, c, B b = 1, 3, 2;

For structs and functions
{A a = 1, B b = 2, C c}
(C c, A a = 1, B b)

int value3 = 0x132FE;
int value4 = 0b111_111_111;
int value5 = 0.31323f;
int value6 = 20f;
*#

type this_specific_string is 1 by 8 bytes;
this_specific_string value7 = "a string";

int value8 = "a";
int value9 = cool_enum.nng;

entry asm {

}

## single comment
#* mutli-line comment
	#* ## with nesting *#*#
## type new_thing 16 bytes;
## type new_thing is awooga;
## type new_thing is 16 2;
## type new_thing is 16 by bytes;

struct slice {
	i64 len,
	byte[0] ptr
}

prefix (int) seven insert return 7;
prefix (int) (string) proc_pointer_lol;

#* nullable types via macros

	int actual_index;
	maybe(int) index? = names find "felix";
	exists(index?) {
		print("felix found!")
		actual_index = index?
	}
	empty(index?) {
		print("No felix found")
	}

*#

postfix (slice slc) as_slice (string str) asm {
	mov slc.ptr, str[0];
	mov slc.len, str[1];
}

postfix (string str) as_string (slice slc) asm {
	mov str[0], slc.ptr;
	mov str[1], slc.len;
}

infix (string) append (string left, string right) {
	return (append (string as_slice), (string as_slice)) as_string;
}

prefix (slice) append (slice left, slice right) {
	i64 new_len = left.len + right.len;
	byte^ new_buffer = clib.alloc new_len;
	copy slice{new_len, new_buffer}, left;
	copy slice{right_len, new_buffer + left_len}, right;
	return slice{new_len, new_buffer};
	if {}
}

type i64 is 8 bytes;

infix (i64 res) + (i64 a, i64 b) asm {
	mov res, a;
	add res, b;
}

prefix (i64 c) add (i64 a, i64 b) insert {
	c = a+b;
}

postfix (f32 f) as_float (i64 n) asm {
	cvtsi2ss #r(xmm1), n;
	mov f, #r(xmm1);
}

postfix (i32 f) as_int (f32 f) asm {
	mov #r xmm1, f;
	cvtss2si n, #r xmm1;
}

macro for(#decl init, bool check, #statement update, #block code) {
	init;
	asm { lbl start_loop; }
	code;
	assembly_true check;
	asm { jn #lbl end_label; }
	update;
	asm { jmp start_loop; }
	asm { lbl #lbl end_label; }
}

macro if(bool check, #block code) {
	assembly_true check;
	asm { jn end_label; }
	code;
	asm { lbl end_label; }
}

prefix assembly_true(bool boolean) asm {
	cmp boolean, 1;
}
