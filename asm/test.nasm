; This code is generated by Triops (in first person). If I have something to say, it'll be prepended with 'Triops'.
; Triops version: 2

global _start

section .text
_start:
	; Triops: Variable intialization for entry
	sub rsp, 32; Triops: This is the size of all variables on the stack

	; Triops: init `A`
	mov byte [rsp + 0], 1

	; Triops: init `C`
	mov byte [rsp + 1], 3

	; Triops: init `D`
	mov byte [rsp + 2], 4

	; Triops: init `B`
	mov word [rsp + 4], 2

	; Triops: init `E`
	mov dword [rsp + 8], 12

	; Triops: init `greeting`
	mov qword [rsp + 16], vardata.greeting + 8
	mov qword [rsp + 24], 10

	; Triops: init `data`
	mov rsi, 0; Triops: zero init

	; Triops: init `system_function`
	mov rax, 0; Triops: zero init

	; Triops: init `length`
	mov rdx, 0; Triops: zero init

	; Triops: init `stream`
	mov rdi, 0; Triops: zero init

	; Triops: init `error_code`
	mov rdi, 0; Triops: zero init

	; Triops: User code
	mov rsi, qword [rsp + 16]
	mov rdx, qword [rsp + 24]
	mov rax, 1
	mov rdi, 1
	syscall
	mov rax, 60
	mov rdi, 0
	syscall
	entry.thing:
	db 100, 100, 100, 100, 100

	; Triops: leaving the stack as I found it
	add rsp, 32; Triops: This was the size of all variables on the stack

	; Triops: Adding the unix exit, in case the user doesn't add one
	mov rax, 60; Triops: 60 is exit
	mov rdi, 0; Triops: 0 is success
	syscall

section .data
	vardata.greeting:
		dq 0; Triops: Dynamic array, depth: 0
		db 72, 105, 32, 116, 104, 101, 114, 101, 33, 10

